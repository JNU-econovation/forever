plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'com.google.cloud.tools.jib' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	jjwt_version = '0.11.5'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'

	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0'
	implementation 'org.springframework.cloud:spring-cloud-dependencies:2023.0.0'
	implementation 'org.springframework.cloud:spring-cloud-commons:4.1.1'

	//jwt
	implementation "io.jsonwebtoken:jjwt-api:${jjwt_version}"
	implementation "io.jsonwebtoken:jjwt-impl:${jjwt_version}"
	implementation "io.jsonwebtoken:jjwt-jackson:${jjwt_version}"

	implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
	implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'


	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'

	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// SpringDoc OpenAPI 3 (Swagger)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.security:spring-security-test'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib {
    def profile = System.getenv('PROFILE') ?: ''
    def dockerUsername = System.getenv('DOCKER_USERNAME') ?: ''
    def dockerPassword = System.getenv('DOCKER_PASSWORD') ?: ''
    def dockerRepo = System.getenv('DOCKER_REPO') ?: ''

    def imageName = dockerUsername && dockerRepo ? "$dockerUsername/$dockerRepo-$profile" : ''
    def imageTag = System.getenv('IMAGE_TAG') ?: ''

    from {
        image = 'amazoncorretto:21-alpine-jdk'
    }
    to {
        image = imageName
        tags = [imageTag]
        auth {
            username = dockerUsername
            password = dockerPassword
        }
    }
    container {
        jvmFlags = [
            '-Dspring.profiles.active=' + profile,
            '-Duser.timezone=Asia/Seoul',
            '-Dfile.encoding=UTF-8',
            '-XX:+UseContainerSupport'
        ]
    }
}

tasks.named('test') {
	useJUnitPlatform()
}
